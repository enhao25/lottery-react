{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","eth","Contract","App","state","manager","players","balance","value","message","errorMsg","loading","errorMsgChooseWin","loadingChooseWin","onSubmit","event","a","preventDefault","ethereum","enable","getAccounts","accounts","setState","lottery","methods","enter","send","from","utils","toWei","updatePlayernBalance","onClick","pickWinner","currentWinner","call","winner","console","log","getPlayers","getBalance","options","address","this","className","length","fromWei","Form","error","Input","onChange","target","placeholder","Button","primary","style","marginTop","Message","header","content","basic","color","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0846f0fd.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst web3 = new Web3(window.web3.currentProvider);\r\n\r\nexport default web3;","import web3 from \"./web3\";\r\n\r\nconst address = \"0x2d0E30274d7bF0dc0256FfB77C351De120735e09\";\r\n\r\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\r\n\r\nexport default new web3.eth.Contract(abi, address);","import React, { Component } from 'react';\r\nimport { Button, Form, Input, Message } from 'semantic-ui-react';\r\nimport './App.css';\r\n\r\nimport web3 from \"./web3\";\r\nimport lottery from './lottery';\r\n\r\nclass App extends Component {\r\n  // Can use this instead of using the constructor\r\n  state = {\r\n    manager: '',\r\n    players: [],\r\n    balance: '',\r\n    value: '',\r\n    message: '',\r\n    errorMsg: '',\r\n    loading: false,\r\n    errorMsgChooseWin: '',\r\n    loadingChooseWin: false\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const manager = await lottery.methods.manager().call();\r\n    this.updatePlayernBalance();\r\n\r\n    this.setState({ manager })\r\n  }\r\n\r\n  onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // Enable ethereum on the webapge\r\n    await window.ethereum.enable();\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    this.setState({ message: \"Waiting on transaction success...\", loading: true, errorMsg: \"\" })\r\n    \r\n    try {\r\n      await lottery.methods.enter().send({\r\n        from: accounts[0],\r\n        value: web3.utils.toWei(this.state.value, 'ether')\r\n      });\r\n      this.setState({ message: 'You have been entered!' })\r\n    } catch(err) {\r\n      this.setState({ message:\"\", errorMsg: err.message })\r\n    }\r\n    \r\n    this.setState({ loading: false })\r\n    this.updatePlayernBalance();\r\n  }\r\n\r\n  onClick = async (event) => {\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    this.setState({ message: \"Waiting on transaction success...\", loadingChooseWin: true, errorMsgChooseWin: \"\" })\r\n    \r\n    try {\r\n      await lottery.methods.pickWinner().send({\r\n        from: accounts[0]\r\n      });\r\n      const winner = await lottery.methods.currentWinner().call();\r\n      console.log(lottery.methods);\r\n      this.setState({ message: `The winner is ${winner}.` })\r\n\r\n    } catch (err) {\r\n      this.setState({ message:\"\", errorMsgChooseWin: err.message })\r\n    }\r\n\r\n    this.setState({ loadingChooseWin: false });\r\n    \r\n    this.updatePlayernBalance();\r\n  }\r\n\r\n  updatePlayernBalance = async () => {\r\n    const players = await lottery.methods.getPlayers().call();\r\n    // Balance inside our eth contract\r\n    const balance = await web3.eth.getBalance(lottery.options.address); \r\n    this.setState({ players, balance })\r\n  }\r\n\r\n  render() {\r\n    const { manager, players, balance, value, message } = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Lottery Contract</h1>\r\n        <p>This Contract is managed by {manager}</p>\r\n        <p>There are currently {players.length} people entered, competiting to win {web3.utils.fromWei(balance, 'ether')} ether!</p>\r\n\r\n        <hr />\r\n\r\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMsg}>\r\n          <h3>Want to try your luck?</h3>\r\n          <div>\r\n            <label>Amount of ether to enter </label> <br />\r\n            <Input \r\n              value={value}\r\n              onChange={event => this.setState({ value: event.target.value })}\r\n              placeholder=\"in ether\"\r\n            />\r\n          </div>\r\n          <Button loading={this.state.loading} primary style={{marginTop: \"10px\"}}>Enter</Button>\r\n          <Message error header=\"Oops!\" content={this.state.errorMsg} />\r\n        </Form>\r\n\r\n        <hr />\r\n        <Form error={!!this.state.errorMsgChooseWin}>\r\n          <h3>Ready to pick a winner?</h3>\r\n          <Button loading={this.state.loadingChooseWin} onClick={this.onClick} basic color='blue'>\r\n            Pick a winner!\r\n          </Button>\r\n          <Message error header=\"Oops!\" content={this.state.errorMsgChooseWin} />\r\n        </Form>\r\n        <hr />\r\n\r\n        <h1>{message}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}